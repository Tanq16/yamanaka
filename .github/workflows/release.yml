name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  process-commit:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      release_created: ${{ steps.create_release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          # Extract current version numbers
          VERSION_PARTS=(${LATEST_TAG//./ })
          MAJOR=${VERSION_PARTS[0]#v}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Check commit message for version increments
          if git log -1 --pretty=%B | grep -i "version bump"; then
            NEW_VERSION="v$((MAJOR + 1)).0"
          elif git log -1 --pretty=%B | grep -i "minor bump"; then
            NEW_VERSION="v$MAJOR.$((MINOR + 1)).0"
          elif git log -1 --pretty=%B | grep -i "patch bump"; then
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
          else
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "Previous version: $LATEST_TAG\n New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create Release
        id: create_release
        run: |
          gh release create "${{ steps.version.outputs.new_version }}" \
            --title "Release ${{ steps.version.outputs.new_version }}" --draft \
            --notes "Yamanaka Server - Latest (Version: ${{ steps.version.outputs.new_version }})" \
            --target ${{ github.sha }}
          echo "release_created=true" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

  build-server:
    needs: process-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build Server Binary
        run: |
            cd server
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o "yamanaka-server${{ matrix.os == 'windows' && '.exe' || '' }}" .
            zip -r ../yamanaka-server-${{ matrix.os }}-${{ matrix.arch }}.zip yamanaka-server*
      
      - name: Upload Release Asset
        run: |
          gh release upload "${{ needs.process-commit.outputs.version }}" "yamanaka-server-${{ matrix.os }}-${{ matrix.arch }}.zip" --clobber
        env:
          GH_TOKEN: ${{ github.token }}

  publish-docker:
    needs: process-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: tanq16
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: tanq16/yamanaka:latest,tanq16/yamanaka:${{ needs.process-commit.outputs.version }}

  publish-release:
    needs: [process-commit, build-server, publish-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Publish Release
        run: |
          gh release edit "${{ needs.process-commit.outputs.version }}" --draft=false
        env:
          GH_TOKEN: ${{ github.token }}

  cleanup-on-failure:
    needs: [process-commit, build-server, publish-docker, publish-release]
    if: failure() && needs.process-commit.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Draft Release
        run: |
          echo "Cleaning up draft release due to workflow failure"
          gh release delete "${{ needs.process-commit.outputs.version }}" --yes
        env:
          GH_TOKEN: ${{ github.token }}
