name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Bump Version and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Version and Check for Changes
        id: version_check
        run: |
          # Get the latest tag from the repository
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag is: $latest_tag"

          # Get all commit messages since the last tag
          commits_since_tag=$(git log ${latest_tag}..HEAD --oneline)

          # If there are no new commits, there's nothing to release.
          if [ -z "$commits_since_tag" ]; then
            echo "No new commits since last tag. No release needed."
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Determine the type of version bump based on Conventional Commits, Default: bump
          bump="patch"
          if echo "$commits_since_tag" | grep -q "minor bump"; then
            bump="minor"
          fi
          if echo "$commits_since_tag" | grep -q "major bump"; then
            bump="major"
          fi
          echo "Determined version bump: $bump"

          # Use bash to increment the version number
          IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          case "$bump" in
            "major")
              major=$((major + 1)); minor=0; patch=0
              ;;
            "minor")
              minor=$((minor + 1)); patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version_tag="v${major}.${minor}.${patch}"
          echo "New version tag will be: $new_version_tag"

          # Set outputs for subsequent steps
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "new_tag=$new_version_tag" >> $GITHUB_OUTPUT
          echo "version=${new_version_tag#v}" >> $GITHUB_OUTPUT

      - name: Set up Go
        if: steps.version_check.outputs.should_release == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Set up Node.js
        if: steps.version_check.outputs.should_release == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: plugin/package-lock.json

      - name: Update plugin version files
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          echo "Updating plugin JSON files to version $VERSION"
          jq --arg v "$VERSION" '.version = $v' plugin/manifest.json > tmp.json && mv tmp.json plugin/manifest.json
          jq --arg v "$VERSION" '.version = $v' plugin/package.json > tmp.json && mv tmp.json plugin/package.json
          echo "Updated manifest.json:"
          cat plugin/manifest.json

      - name: Build Obsidian plugin
        if: steps.version_check.outputs.should_release == 'true'
        working-directory: ./plugin
        run: |
          npm install
          npm run build

      - name: Set up build directory
        if: steps.version_check.outputs.should_release == 'true'
        run: mkdir -p release-assets

      - name: Build server binaries for multiple platforms
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          LDFLAGS="-s -w -X 'main.version=v$VERSION'"
          cd server
          GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o release-assets/yamanaka-server

      - name: Package plugin for release
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          mkdir -p release-assets/yamanaka
          cp plugin/main.js release-assets/yamanaka/
          cp plugin/styles.css release-assets/yamanaka/
          cp plugin/manifest.json release-assets/yamanaka/
          (cd release-assets && zip -r yamanaka-plugin-v$VERSION.zip yamanaka)

      - name: Create Git Tag and GitHub Release
        if: steps.version_check.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version_check.outputs.new_tag }}
          files: release-assets/*
